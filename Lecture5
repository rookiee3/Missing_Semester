# Job control
  - From what we have seen, we can use some ps aux | grep commands to get our jobs’ pids and then kill them, but there are better ways to do it. Start a sleep 10000 job in a terminal, background it with Ctrl-Z and continue its execution with bg. Now use pgrep to find its pid and pkill to kill it without ever typing the pid itself. (Hint: use the -af flags).
    sleep 10000
    Ctrl-Z
    bg
    pgrep sleep
    pkill -f sleep
    
  - Say you don’t want to start a process until another completes. How would you go about it? In this exercise, our limiting process will always be sleep 60 &. One way to achieve this is to use the wait command. Try launching the sleep command and having an ls wait until the background process finishes.
    sleep 60 &
    //after this commamd you will get the pid of sleep for example 61//
    wait 61; ls
    
  - However, this strategy will fail if we start in a different bash session, since wait only works for child processes. One feature we did not discuss in the notes is that the kill command’s exit status will be zero on success and nonzero otherwise. kill -0 does not send a signal but will give a nonzero exit status if the process does not exist. Write a bash function called pidwait that takes a pid and waits until the given process completes. You should use sleep to avoid wasting CPU unnecessarily.
        pidwait()
    {
      while kill -0 $1 #循环直到进程结束
      do
      sleep 1 
      done
      ls
    }
    
# Terminal multiplexer
  -Follow this tmux tutorial and then learn how to do some basic customizations following these steps.
    https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/
    https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/
    
# Aliases
  - Create an alias dc that resolves to cd for when you type it wrongly.
    alias dc=cd
    
  - Run history | awk '{$1="";print substr($0,2)}' | sort | uniq -c | sort -n | tail -n 10 to get your top 10 most used commands and consider writing shorter aliases for them. Note: this works for Bash; if you’re using ZSH, use history 1 instead of just history.
    history | awk '{$1="";print substr($0,2)}' | sort | uniq -c | sort -n | tail -n 10
    Run history | awk '{$1="";print substr($0,2)}' | sort | uniq -c | sort -n | tail -n 10 to get your top 10 most used commands and consider writing shorter aliases for them. Note: this works for Bash; if you’re using ZSH, use history 1 instead of just history.
      6 cd
      6 cd /tmp/missing
      6 tree
      7 ls
      7 pwd
      7 python3 fizzbuzz.py
      8 ls -l
      8 vim fizzbuzz.py
      9 cat last-modified.txt
     12 vim
    alias dc=cd
    
# Dotfiles
  - Create a folder for your dotfiles and set up version control.
    Add a configuration for at least one program, e.g. your shell, with some customization (to start off, it can be something as simple as customizing your shell prompt by setting $PS1).
    Set up a method to install your dotfiles quickly (and without manual effort) on a new machine. This can be as simple as a shell script that calls ln -s for each file, or you could use a specialized utility.
    Test your installation script on a fresh virtual machine.
    Migrate all of your current tool configurations to your dotfiles repository.
    Publish your dotfiles on GitHub.
      mkdir ~/dotfiles
      git init ~/dotfiles
      files="bashrc vimrc "

      for file in $files; do
        ln -s ~/dotfiles/$file ~/.$file
      done

# Remote Machines
  - Go to ~/.ssh/ and check if you have a pair of SSH keys there. If not, generate them with ssh-keygen -o -a 100 -t ed25519. It is recommended that you use a password and use ssh-agent , more info here.
      ssh-keygen -o -a 100 -t ed25519
      
  - Edit .ssh/config to have an entry as follows
      Host vm
      User username_goes_here
      HostName ip_goes_here
      IdentityFile ~/.ssh/id_ed25519
      LocalForward 9999 localhost:8888
      
  - Use ssh-copy-id vm to copy your ssh key to the server.
      ssh-copy-pi pi
      
  - Start a webserver in your VM by executing python -m http.server 8888. Access the VM webserver by navigating to http://localhost:9999 in your machine.
      pi@raspberrypi:~$ python -m http.server 8888
      Serving HTTP on 0.0.0.0 port 8888 (http://0.0.0.0:8888/) ...
      curl localhost:9999
      pi@raspberrypi:~$ python -m http.server 8888
      Serving HTTP on 0.0.0.0 port 8888 (http://0.0.0.0:8888/) ...
      127.0.0.1 - - [15/May/2021 02:45:53] "GET / HTTP/1.1" 200 -
      
  - Edit your SSH server config by doing sudo vim /etc/ssh/sshd_config and disable password authentication by editing the value of PasswordAuthentication. Disable root login by editing the value of PermitRootLogin. Restart the ssh service with sudo service sshd restart. Try sshing in again.
      pi@raspberrypi:~$ vim /etc/ssh/sshd_config
      sudo launchctl stop com.openssh.sshd
      sudo launchctl start com.openssh.sshd
      
  - (Challenge) Install mosh in the VM and establish a connection. Then disconnect the network adapter of the server/VM. Can mosh properly recover from it?
      sudo apt-get install mosh
      
  - (Challenge) Look into what the -N and -f flags do in ssh and figure out a command to achieve background port forwarding.
      -N      Do not execute a remote command.  This is useful for just forwarding ports.
      -f      Requests ssh to go to background just before command execution.  This is useful if ssh is going to ask for passwords or passphrases, but the user wants it in the background.  This implies -n.  The recommended way to start X11 programs at a remote site is with something like ssh -f host xterm.
      If the ExitOnForwardFailure configuration option is set to ``yes'', then a client started with -f will wait for all remote port forwards to be successfully established before placing itself in the background.
